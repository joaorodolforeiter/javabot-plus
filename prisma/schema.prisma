datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Order {
  id          Int         @id @default(autoincrement())
  orderNumber String      @default(uuid())
  totalAmount Float
  status      String
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  orderItems  OrderItem[]

  @@index([userId])
}

model ShoppingCart {
  id     Int                @id @default(autoincrement())
  userId String
  user   User               @relation(fields: [userId], references: [id])
  items  ShoppingCartItem[]

  @@unique([userId])
}

model ShoppingCartItem {
  id             Int          @id @default(autoincrement())
  productId      Int
  product        Product      @relation(fields: [productId], references: [id])
  quantity       Int
  shoppingCartId Int
  shoppingCart   ShoppingCart @relation(fields: [shoppingCartId], references: [id])

  @@index([shoppingCartId])
  @@index([productId])
}

model OrderItem {
  id         Int     @id @default(autoincrement())
  quantity   Int
  totalPrice Float
  product    Product @relation(fields: [productId], references: [id])
  productId  Int
  order      Order   @relation(fields: [orderId], references: [id])
  orderId    Int

  @@index([productId])
  @@index([orderId])
}

model Animal {
  id         Int     @id @default(autoincrement())
  nome       String
  especie    String
  idade      Int
  descricao  String
  imagemURL  String
  disponivel Boolean @default(true)

  usuario   User?   @relation(fields: [usuarioId], references: [id])
  usuarioId String?

  @@index([usuarioId])
}

model Product {
  id        Int    @id @default(autoincrement())
  nome      String
  marca     String
  preco     Float
  descricao String
  imagemURL String

  category   ProductCategory? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  stock            Int                @default(dbgenerated("0"))
  orderItems       OrderItem[]
  ShoppingCartItem ShoppingCartItem[]

  @@index([id])
  @@index([categoryId])
}

model ProductCategory {
  id      Int       @id @default(autoincrement())
  name    String
  Product Product[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  cpf            String?       @unique
  dataNascimento DateTime?
  endereco       String?
  telefone       String?
  adocoes        Animal[]
  orders         Order[]
  shoppingCart   ShoppingCart? // A user can have one shopping cart
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
